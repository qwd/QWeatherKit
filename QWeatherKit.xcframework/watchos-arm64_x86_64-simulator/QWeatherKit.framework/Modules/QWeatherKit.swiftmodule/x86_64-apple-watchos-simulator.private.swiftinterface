// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-watchos8.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -module-name QWeatherKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
@_exported import QWeatherKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum Basin : Swift.Int, Swift.Sendable {
  case AL
  case EP
  case NP
  case SP
  case NI
  case SI
  public var code: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Indices : Swift.Int, Swift.Sendable {
  case ALL = 0
  case SPT = 1
  case CW = 2
  case DRSG = 3
  case FIS = 4
  case UV = 5
  case TRA = 6
  case AG = 7
  case COMF = 8
  case FLU = 9
  case AP = 10
  case AC = 11
  case GL = 12
  case MU = 13
  case DC = 14
  case PTFC = 15
  case SPI = 16
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Lang : Swift.Int, Swift.Sendable {
  case ZH_HANS = 0
  case ZH_HANT = 1
  case EN = 2
  case DE = 3
  case ES = 4
  case FR = 5
  case IT = 6
  case JA = 7
  case KO = 8
  case RU = 9
  case HI = 10
  case TH = 11
  case AR = 12
  case PT = 13
  case BN = 14
  case MS = 15
  case NL = 16
  case EL = 17
  case LA = 18
  case SV = 19
  case ID = 20
  case PL = 21
  case TR = 22
  case CS = 23
  case ET = 24
  case VI = 25
  case FIL = 26
  case FI = 27
  case HE = 28
  case IS = 29
  case NB = 30
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension QWeatherKit.Lang {
  public var code: Swift.String {
    get
  }
}
@objc public enum Poi : Swift.Int, Swift.Sendable {
  case SCENIC = 0
  case CSTA
  case TSTA
  public var code: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Range : Swift.Int, Swift.Sendable {
  case CN = 0
  case AF = 1
  case AX = 2
  case AL = 3
  case DZ = 4
  case AS = 5
  case AD = 6
  case AO = 7
  case AI = 8
  case AQ = 9
  case AG = 10
  case AR = 11
  case AM = 12
  case AW = 13
  case AU = 14
  case AT = 15
  case AZ = 16
  case BS = 17
  case BH = 18
  case BD = 19
  case BB = 20
  case BY = 21
  case BE = 22
  case BZ = 23
  case BJ = 24
  case BM = 25
  case BT = 26
  case BO = 27
  case BQ = 28
  case BA = 29
  case BW = 30
  case BV = 31
  case BR = 32
  case IO = 33
  case BN = 34
  case BG = 35
  case BF = 36
  case BI = 37
  case CV = 38
  case KH = 39
  case CM = 40
  case CA = 41
  case KY = 42
  case CF = 43
  case TD = 44
  case CL = 45
  case CX = 46
  case CC = 47
  case CO = 48
  case KM = 49
  case CG = 50
  case CD = 51
  case CK = 52
  case CR = 53
  case CI = 54
  case HR = 55
  case CU = 56
  case CW = 57
  case CY = 58
  case CZ = 59
  case DK = 60
  case DJ = 61
  case DM = 62
  case DO = 63
  case EC = 64
  case EG = 65
  case SV = 66
  case GQ = 67
  case ER = 68
  case EE = 69
  case ET = 70
  case FK = 71
  case FO = 72
  case FJ = 73
  case FI = 74
  case FR = 75
  case GF = 76
  case PF = 77
  case TF = 78
  case GA = 79
  case GM = 80
  case GE = 81
  case DE = 82
  case GH = 83
  case GI = 84
  case GR = 85
  case GL = 86
  case GD = 87
  case GP = 88
  case GU = 89
  case GT = 90
  case GG = 91
  case GN = 92
  case GW = 93
  case GY = 94
  case HT = 95
  case HM = 96
  case VA = 97
  case HN = 98
  case HK = 99
  case HU = 100
  case IS = 101
  case IN = 102
  case ID = 103
  case IR = 104
  case IQ = 105
  case IE = 106
  case IM = 107
  case IL = 108
  case IT = 109
  case JM = 110
  case JP = 111
  case JE = 112
  case JO = 113
  case KZ = 114
  case KE = 115
  case KI = 116
  case KP = 117
  case KR = 118
  case KW = 119
  case KG = 120
  case LA = 121
  case LV = 122
  case LB = 123
  case LS = 124
  case LR = 125
  case LY = 126
  case LI = 127
  case LT = 128
  case LU = 129
  case MO = 130
  case MK = 131
  case MG = 132
  case MW = 133
  case MY = 134
  case MV = 135
  case ML = 136
  case MT = 137
  case MH = 138
  case MQ = 139
  case MR = 140
  case MU = 141
  case YT = 142
  case MX = 143
  case FM = 144
  case MD = 145
  case MC = 146
  case MN = 147
  case ME = 148
  case MS = 149
  case MA = 150
  case MZ = 151
  case MM = 152
  case NA = 153
  case NR = 154
  case NP = 155
  case NL = 156
  case NC = 157
  case NZ = 158
  case NI = 159
  case NE = 160
  case NG = 161
  case NU = 162
  case NF = 163
  case MP = 164
  case NO = 165
  case OM = 166
  case PK = 167
  case PW = 168
  case PS = 169
  case PA = 170
  case PG = 171
  case PY = 172
  case PE = 173
  case PH = 174
  case PN = 175
  case PL = 176
  case PT = 177
  case PR = 178
  case QA = 179
  case RE = 180
  case RO = 181
  case RU = 182
  case RW = 183
  case BL = 184
  case SH = 185
  case KN = 186
  case LC = 187
  case MF = 188
  case PM = 189
  case VC = 190
  case WS = 191
  case SM = 192
  case ST = 193
  case SA = 194
  case SN = 195
  case RS = 196
  case SC = 197
  case SL = 198
  case SG = 199
  case SX = 200
  case SK = 201
  case SI = 202
  case SB = 203
  case SO = 204
  case ZA = 205
  case GS = 206
  case SS = 207
  case ES = 208
  case LK = 209
  case SD = 210
  case SR = 211
  case SJ = 212
  case SZ = 213
  case SE = 214
  case CH = 215
  case SY = 216
  case TW = 217
  case TJ = 218
  case TZ = 219
  case TH = 220
  case TL = 221
  case TG = 222
  case TK = 223
  case TO = 224
  case TT = 225
  case TN = 226
  case TR = 227
  case TM = 228
  case TC = 229
  case TV = 230
  case UG = 231
  case UA = 232
  case AE = 233
  case GB = 234
  case US = 235
  case UM = 236
  case UY = 237
  case UZ = 238
  case VU = 239
  case VE = 240
  case VN = 241
  case VG = 242
  case VI = 243
  case WF = 244
  case EH = 245
  case YE = 246
  case ZM = 247
  case ZW = 248
  public var code: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Unit : Swift.Int, Swift.Sendable {
  case METRIC = 0
  case IMPERIAL
  public var code: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class AirParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class AirV1Parameter : ObjectiveC.NSObject {
  final public let longitude: Swift.Double
  final public let latitude: Swift.Double
  final public let lang: QWeatherKit.Lang?
  public init(longitude: Swift.Double, latitude: Swift.Double, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(longitude: Swift.Double, latitude: Swift.Double, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class AirV1StationParameter : ObjectiveC.NSObject {
  final public let locationID: Swift.String
  final public let lang: QWeatherKit.Lang?
  public init(locationID: Swift.String, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(locationID: Swift.String, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class AstronomyMoonParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, date: Swift.String, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, date: Swift.String, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class AstronomySunParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  public init(location: Swift.String, date: Swift.String)
  @objc public static func instance(location: Swift.String, date: Swift.String) -> Self
  @objc deinit
}
@objc final public class SolarElevationAngleParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  final public let time: Swift.String
  final public let tz: Swift.String
  final public let alt: Swift.String
  public init(location: Swift.String, date: Swift.String, time: Swift.String, tz: Swift.String, alt: Swift.String)
  @objc public static func instance(location: Swift.String, date: Swift.String, time: Swift.String, tz: Swift.String, alt: Swift.String) -> Self
  @objc deinit
}
@objc final public class GeoCityLookupParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let adm: Swift.String?
  final public let range: QWeatherKit.Range?
  final public let number: Swift.Int?
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, adm: Swift.String? = nil, range: QWeatherKit.Range? = nil, number: Swift.Int? = nil, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, adm: Swift.String?, range: Foundation.NSNumber?, number: Foundation.NSNumber?, lang: Foundation.NSNumber?) -> QWeatherKit.GeoCityLookupParameter
  @objc deinit
}
@objc final public class GeoCityTopParameter : ObjectiveC.NSObject {
  final public let range: QWeatherKit.Range?
  final public let number: Swift.Int?
  final public let lang: QWeatherKit.Lang?
  public init(range: QWeatherKit.Range? = nil, number: Swift.Int? = nil, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(range: Foundation.NSNumber?, number: Foundation.NSNumber?, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class GeoPoiLookupParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let type: QWeatherKit.Poi
  final public let city: Swift.String?
  final public let number: Swift.Int?
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, type: QWeatherKit.Poi, city: Swift.String? = nil, number: Swift.Int? = nil, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, type: QWeatherKit.Poi, city: Swift.String? = nil, number: Foundation.NSNumber?, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class GeoPoiRangeParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let type: QWeatherKit.Poi
  final public let radius: Swift.Int?
  final public let number: Swift.Int?
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, type: QWeatherKit.Poi, radius: Swift.Int? = nil, number: Swift.Int? = nil, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, type: QWeatherKit.Poi, radius: Foundation.NSNumber?, number: Foundation.NSNumber?, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class GridWeatherParameter : ObjectiveC.NSObject {
  final public let longitude: Swift.Double
  final public let latitude: Swift.Double
  final public let lang: QWeatherKit.Lang?
  final public let unit: QWeatherKit.Unit?
  public init(longitude: Swift.Double, latitude: Swift.Double, lang: QWeatherKit.Lang? = nil, unit: QWeatherKit.Unit? = nil)
  @objc public static func instance(longitude: Swift.Double, latitude: Swift.Double, lang: Foundation.NSNumber?, unit: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class HistoricalAirParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, date: Swift.String, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, date: Swift.String, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class HistoricalWeatherParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  final public let lang: QWeatherKit.Lang?
  final public let unit: QWeatherKit.Unit?
  public init(location: Swift.String, date: Swift.String, lang: QWeatherKit.Lang? = nil, unit: QWeatherKit.Unit? = nil)
  @objc public static func instance(location: Swift.String, date: Swift.String, lang: Foundation.NSNumber?, unit: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class IndicesParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let type: [QWeatherKit.Indices]
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, type: [QWeatherKit.Indices], lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, type: Swift.Array<Swift.Int>, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class MinutelyParameter : ObjectiveC.NSObject {
  final public let longitude: Swift.Double
  final public let latitude: Swift.Double
  final public let lang: QWeatherKit.Lang?
  public init(longitude: Swift.Double, latitude: Swift.Double, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(longitude: Swift.Double, latitude: Swift.Double, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc final public class OceanParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let date: Swift.String
  public init(location: Swift.String, date: Swift.String)
  @objc public static func instance(location: Swift.String, date: Swift.String) -> Self
  @objc deinit
}
@objc final public class StormListParameter : ObjectiveC.NSObject {
  final public let basin: QWeatherKit.Basin
  final public let year: Swift.Int
  public init(basin: QWeatherKit.Basin, year: Swift.Int)
  @objc public static func instance(basin: QWeatherKit.Basin, year: Swift.Int) -> Self
  @objc deinit
}
@objc final public class StormParameter : ObjectiveC.NSObject {
  final public let stormid: Swift.String
  public init(stormid: Swift.String)
  @objc public static func instance(stormid: Swift.String) -> Self
  @objc deinit
}
@objc final public class WarningListParameter : ObjectiveC.NSObject {
  final public let range: QWeatherKit.Range
  public init(range: QWeatherKit.Range)
  @objc public static func instance(range: QWeatherKit.Range) -> Self
  @objc deinit
}
@objc final public class WarningNowParameter : ObjectiveC.NSObject {
  final public let location: Swift.String
  final public let lang: QWeatherKit.Lang?
  public init(location: Swift.String, lang: QWeatherKit.Lang? = nil)
  @objc public static func instance(location: Swift.String, lang: Foundation.NSNumber?) -> Self
  @objc deinit
}
@objc @objcMembers final public class WeatherParameter : ObjectiveC.NSObject {
  @objc final public let location: Swift.String
  final public let lang: QWeatherKit.Lang?
  final public let unit: QWeatherKit.Unit?
  public init(location: Swift.String, lang: QWeatherKit.Lang? = nil, unit: QWeatherKit.Unit? = nil)
  @objc public static func instance(location: Swift.String, lang: Foundation.NSNumber?, unit: Foundation.NSNumber?) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiIndices {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiMinutely {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiOcean {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiWarning {
  @objc deinit
}
@objc @objcMembers final public class AirColor : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let red: Swift.Int
  @objc final public let green: Swift.Int
  @objc final public let blue: Swift.Int
  @objc final public let alpha: Swift.Double
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let forecastTime: Swift.String
  @objc final public let indexes: [QWeatherKit.AirIndex]
  @objc final public let pollutants: [QWeatherKit.Pollutant]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirIndex : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let name: Swift.String
  @objc final public let aqi: Swift.Double
  @objc final public let aqiDisplay: Swift.String
  @objc final public let level: Swift.String?
  @objc final public let category: Swift.String?
  @objc final public let color: QWeatherKit.AirColor
  @objc final public let primaryPollutant: QWeatherKit.PrimaryPollutant?
  @objc final public let health: QWeatherKit.Health?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirV1CurrentResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let metadata: QWeatherKit.Metadata
  @objc final public let indexes: [QWeatherKit.AirIndex]
  @objc final public let pollutants: [QWeatherKit.Pollutant]
  @objc final public let stations: [QWeatherKit.Station]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirV1Daily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let forecastStartTime: Swift.String
  @objc final public let forecastEndTime: Swift.String
  @objc final public let indexes: [QWeatherKit.AirIndex]
  @objc final public let pollutants: [QWeatherKit.Pollutant]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirV1DailyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let metadata: QWeatherKit.Metadata
  @objc final public let days: [QWeatherKit.AirV1Daily]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirV1HourlyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let metadata: QWeatherKit.Metadata
  @objc final public let hours: [QWeatherKit.AirHourly]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirV1StationResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let metadata: QWeatherKit.Metadata
  @objc final public let pollutants: [QWeatherKit.StationPollutant]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Health : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let effect: Swift.String?
  @objc final public let advice: QWeatherKit.HealthAdvice?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HealthAdvice : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let generalPopulation: Swift.String?
  @objc final public let sensitivePopulation: Swift.String?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Pollutant : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let name: Swift.String
  @objc final public let fullName: Swift.String
  @objc final public let concentration: QWeatherKit.PollutantConcentration
  @objc final public let subIndexes: [QWeatherKit.SubAirIndex]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PollutantConcentration : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let value: Swift.Double
  @objc final public let unit: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PrimaryPollutant : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let name: Swift.String
  @objc final public let fullName: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Station : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let stationId: Swift.String?
  @objc final public let name: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StationPollutant : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let name: Swift.String
  @objc final public let fullName: Swift.String
  @objc final public let concentration: QWeatherKit.PollutantConcentration
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class SubAirIndex : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String?
  final public let aqi: Swift.Double?
  @objc final public let aqiDisplay: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirDaily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxDate: Swift.String
  @objc final public let aqi: Swift.String
  @objc final public let level: Swift.String
  @objc final public let category: Swift.String
  @objc final public let primary: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirDailyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let daily: [QWeatherKit.AirDaily]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirNow : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let pubTime: Swift.String
  @objc final public let aqi: Swift.String
  @objc final public let level: Swift.String
  @objc final public let category: Swift.String
  @objc final public let primary: Swift.String
  @objc final public let pm10: Swift.String
  @objc final public let pm2p5: Swift.String
  @objc final public let no2: Swift.String
  @objc final public let so2: Swift.String
  @objc final public let co: Swift.String
  @objc final public let o3: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirNowResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let now: QWeatherKit.AirNow
  @objc final public let station: [QWeatherKit.AirStation]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AirStation : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let pubTime: Swift.String
  @objc final public let name: Swift.String
  @objc final public let stationId: Swift.String
  @objc final public let aqi: Swift.String
  @objc final public let level: Swift.String
  @objc final public let category: Swift.String
  @objc final public let primary: Swift.String
  @objc final public let pm10: Swift.String
  @objc final public let pm2p5: Swift.String
  @objc final public let no2: Swift.String
  @objc final public let so2: Swift.String
  @objc final public let co: Swift.String
  @objc final public let o3: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AstronomyMoonResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let moonrise: Swift.String
  @objc final public let moonset: Swift.String
  @objc final public let moonPhase: [QWeatherKit.MoonPhase]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AstronomySolarElevationAngleResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let solarElevationAngle: Swift.String
  @objc final public let solarAzimuthAngle: Swift.String
  @objc final public let solarHour: Swift.String
  @objc final public let hourAngle: Swift.String
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class AstronomySunResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let sunrise: Swift.String
  @objc final public let sunset: Swift.String
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class MoonPhase : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let value: Swift.String
  @objc final public let name: Swift.String
  @objc final public let illumination: Swift.String
  @objc final public let icon: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class ErrorDetail : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let status: Swift.Int
  @objc final public let type: Swift.String
  @objc final public let title: Swift.String
  @objc final public let detail: Swift.String
  @objc final public let invalidParams: Swift.Array<Swift.String>?
  @objc final public let referenceDoc: Swift.String?
  @objc public static func fromMap(_ map: [Swift.String : Any]) -> QWeatherKit.ErrorDetail?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class ErrorResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let error: QWeatherKit.ErrorDetail
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GeoCityLookupResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let location: [QWeatherKit.Location]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GeoCityTopResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let topCityList: [QWeatherKit.Location]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GeoPoiResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let poi: [QWeatherKit.Location]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Location : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let name: Swift.String
  @objc final public let cid: Swift.String
  @objc final public let lat: Swift.String
  @objc final public let lon: Swift.String
  @objc final public let adm2: Swift.String
  @objc final public let adm1: Swift.String
  @objc final public let country: Swift.String
  @objc final public let tz: Swift.String
  @objc final public let utcOffset: Swift.String
  @objc final public let isDst: Swift.String
  @objc final public let type: Swift.String
  @objc final public let rank: Swift.String
  @objc final public let fxLink: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridDaily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxDate: Swift.String
  @objc final public let tempMax: Swift.String
  @objc final public let tempMin: Swift.String
  @objc final public let iconDay: Swift.String
  @objc final public let iconNight: Swift.String
  @objc final public let textDay: Swift.String
  @objc final public let textNight: Swift.String
  @objc final public let wind360Day: Swift.String
  @objc final public let windDirDay: Swift.String
  @objc final public let windScaleDay: Swift.String
  @objc final public let windSpeedDay: Swift.String
  @objc final public let wind360Night: Swift.String
  @objc final public let windDirNight: Swift.String
  @objc final public let windScaleNight: Swift.String
  @objc final public let windSpeedNight: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let cloud: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridDailyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let daily: [QWeatherKit.GridDaily]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let temp: Swift.String
  @objc final public let icon: Swift.String
  @objc final public let text: Swift.String
  @objc final public let wind360: Swift.String
  @objc final public let windDir: Swift.String
  @objc final public let windScale: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let cloud: Swift.String
  @objc final public let dew: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridHourlyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let hourly: [QWeatherKit.GridHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridNow : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let obsTime: Swift.String
  @objc final public let temp: Swift.String
  @objc final public let feelsLike: Swift.String
  @objc final public let icon: Swift.String
  @objc final public let text: Swift.String
  @objc final public let wind360: Swift.String
  @objc final public let windDir: Swift.String
  @objc final public let windScale: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let cloud: Swift.String
  @objc final public let dew: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class GridNowResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let now: QWeatherKit.GridNow
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HistoricalAirHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let pubTime: Swift.String
  @objc final public let aqi: Swift.String
  @objc final public let level: Swift.String
  @objc final public let category: Swift.String
  @objc final public let primary: Swift.String
  @objc final public let pm10: Swift.String
  @objc final public let pm2p5: Swift.String
  @objc final public let no2: Swift.String
  @objc final public let so2: Swift.String
  @objc final public let co: Swift.String
  @objc final public let o3: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HistoricalAirResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let airHourly: [QWeatherKit.HistoricalAirHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HistoricalWeatherDaily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let date: Swift.String
  @objc final public let sunrise: Swift.String
  @objc final public let sunset: Swift.String
  @objc final public let moonrise: Swift.String
  @objc final public let moonset: Swift.String
  @objc final public let moonPhase: Swift.String
  @objc final public let tempMax: Swift.String
  @objc final public let tempMin: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HistoricalWeatherHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let time: Swift.String
  @objc final public let temp: Swift.String
  @objc final public let icon: Swift.String
  @objc final public let text: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let wind360: Swift.String
  @objc final public let windDir: Swift.String
  @objc final public let windScale: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let pressure: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class HistoricalWeatherResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let weatherDaily: QWeatherKit.HistoricalWeatherDaily
  @objc final public let weatherHourly: [QWeatherKit.HistoricalWeatherHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class IndicesDaily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let date: Swift.String
  @objc final public let type: Swift.String
  @objc final public let name: Swift.String
  @objc final public let level: Swift.String
  @objc final public let category: Swift.String
  @objc final public let text: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class IndicesDailyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let daily: [QWeatherKit.IndicesDaily]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Minutely : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let type: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class MinutelyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let summary: Swift.String
  @objc final public let minutely: [QWeatherKit.Minutely]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class CurrentsHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let speed: Swift.String
  @objc final public let dir360: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class CurrentsTable : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let speedMax: Swift.String
  @objc final public let dir360: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class OceanCurrentsResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let currentsTable: [QWeatherKit.CurrentsTable]
  @objc final public let currentsHourly: [QWeatherKit.CurrentsHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class OceanTideResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let tideTable: [QWeatherKit.TideTable]
  @objc final public let tideHourly: [QWeatherKit.TideHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class TideHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let height: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class TideTable : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let height: Swift.String
  @objc final public let type: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Storm : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let stormId: Swift.String
  @objc final public let name: Swift.String
  @objc final public let basin: Swift.String
  @objc final public let year: Swift.String
  @objc final public let isActive: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormForecast : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let lat: Swift.String
  @objc final public let lon: Swift.String
  @objc final public let type: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let moveSpeed: Swift.String?
  @objc final public let moveDir: Swift.String?
  @objc final public let move360: Swift.String?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormForecastResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let forecast: [QWeatherKit.StormForecast]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormListResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let storm: [QWeatherKit.Storm]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormNow : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let pubTime: Swift.String
  @objc final public let lat: Swift.String
  @objc final public let lon: Swift.String
  @objc final public let type: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let moveSpeed: Swift.String
  @objc final public let moveDir: Swift.String
  @objc final public let move360: Swift.String
  @objc final public let windRadius30: QWeatherKit.StormWindRadius?
  @objc final public let windRadius50: QWeatherKit.StormWindRadius?
  @objc final public let windRadius64: QWeatherKit.StormWindRadius?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormTrack : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let time: Swift.String
  @objc final public let lat: Swift.String
  @objc final public let lon: Swift.String
  @objc final public let type: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let moveSpeed: Swift.String
  @objc final public let moveDir: Swift.String
  @objc final public let move360: Swift.String
  @objc final public let windRadius30: QWeatherKit.StormWindRadius?
  @objc final public let windRadius50: QWeatherKit.StormWindRadius?
  @objc final public let windRadius64: QWeatherKit.StormWindRadius?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormTrackResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let isActive: Swift.String
  @objc final public let now: QWeatherKit.StormNow
  @objc final public let track: [QWeatherKit.StormTrack]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class StormWindRadius : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let neRadius: Swift.String?
  @objc final public let seRadius: Swift.String?
  @objc final public let swRadius: Swift.String?
  @objc final public let nwRadius: Swift.String?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Warning : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let warningId: Swift.String
  @objc final public let sender: Swift.String
  @objc final public let pubTime: Swift.String
  @objc final public let title: Swift.String
  @objc final public let startTime: Swift.String
  @objc final public let endTime: Swift.String
  @objc final public let status: Swift.String
  @objc final public let level: Swift.String
  @objc final public let severity: Swift.String
  @objc final public let severityColor: Swift.String
  @objc final public let type: Swift.String
  @objc final public let typeName: Swift.String
  @objc final public let urgency: Swift.String
  @objc final public let certainty: Swift.String
  @objc final public let text: Swift.String
  @objc final public let related: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WarningListResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let warningLocList: [QWeatherKit.WarningLocation]
  @objc final public let fxLink: Swift.String
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WarningLocation : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let locationId: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WarningResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let warning: [QWeatherKit.Warning]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherDaily : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxDate: Swift.String
  @objc final public let sunrise: Swift.String
  @objc final public let sunset: Swift.String
  @objc final public let moonrise: Swift.String
  @objc final public let moonset: Swift.String
  @objc final public let moonPhase: Swift.String
  @objc final public let moonPhaseIcon: Swift.String
  @objc final public let tempMax: Swift.String
  @objc final public let tempMin: Swift.String
  @objc final public let iconDay: Swift.String
  @objc final public let textDay: Swift.String
  @objc final public let iconNight: Swift.String
  @objc final public let textNight: Swift.String
  @objc final public let wind360Day: Swift.String
  @objc final public let windDirDay: Swift.String
  @objc final public let windScaleDay: Swift.String
  @objc final public let windSpeedDay: Swift.String
  @objc final public let wind360Night: Swift.String
  @objc final public let windDirNight: Swift.String
  @objc final public let windScaleNight: Swift.String
  @objc final public let windSpeedNight: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let vis: Swift.String
  @objc final public let cloud: Swift.String
  @objc final public let uvIndex: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherDailyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let daily: [QWeatherKit.WeatherDaily]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherHourly : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let fxTime: Swift.String
  @objc final public let temp: Swift.String
  @objc final public let icon: Swift.String
  @objc final public let text: Swift.String
  @objc final public let wind360: Swift.String
  @objc final public let windDir: Swift.String
  @objc final public let windScale: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let pop: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let cloud: Swift.String
  @objc final public let dew: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherHourlyResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let hourly: [QWeatherKit.WeatherHourly]
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherNow : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let obsTime: Swift.String
  @objc final public let temp: Swift.String
  @objc final public let feelsLike: Swift.String
  @objc final public let icon: Swift.String
  @objc final public let text: Swift.String
  @objc final public let wind360: Swift.String
  @objc final public let windDir: Swift.String
  @objc final public let windScale: Swift.String
  @objc final public let windSpeed: Swift.String
  @objc final public let humidity: Swift.String
  @objc final public let precip: Swift.String
  @objc final public let pressure: Swift.String
  @objc final public let vis: Swift.String
  @objc final public let cloud: Swift.String
  @objc final public let dew: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class WeatherNowResponse : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let code: Swift.String
  @objc final public let updateTime: Swift.String
  @objc final public let fxLink: Swift.String
  @objc final public let now: QWeatherKit.WeatherNow
  @objc final public let refer: QWeatherKit.Refer?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class Metadata : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let tag: Swift.String
  @objc final public let sources: Swift.Array<Swift.String>?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class Refer : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  @objc final public let sources: [Swift.String]?
  @objc final public let license: [Swift.String]?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum QWeatherError : Swift.Error {
  case notToken
  case common(Swift.String)
  case errorResponse(QWeatherKit.ErrorDetail)
}
@objc public enum QWeatherErrorStatus : Swift.Int {
  case notToken = 101
  case common = 102
  case errorResponse = 103
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension QWeatherKit.QWeatherError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public actor QWeather {
  public static var instance: QWeatherKit.QWeather!
  public static func getInstance(_ host: Swift.String) throws -> QWeatherKit.QWeather
  public func setupToken(_ token: Swift.String) async -> Self
  public func setupHost(_ host: Swift.String) async -> Self
  public func setupLogEnable(_ enable: Swift.Bool) async -> Self
  public func geoCityLookup(_ parameter: QWeatherKit.GeoCityLookupParameter) async throws -> QWeatherKit.GeoCityLookupResponse
  public func geoCityTop(_ parameter: QWeatherKit.GeoCityTopParameter) async throws -> QWeatherKit.GeoCityTopResponse
  public func geoPoiLookup(_ parameter: QWeatherKit.GeoPoiLookupParameter) async throws -> QWeatherKit.GeoPoiResponse
  public func geoPoiRange(_ parameter: QWeatherKit.GeoPoiRangeParameter) async throws -> QWeatherKit.GeoPoiResponse
  public func weatherNow(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherNowResponse
  public func weather3d(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherDailyResponse
  public func weather7d(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherDailyResponse
  public func weather10d(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherDailyResponse
  public func weather15d(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherDailyResponse
  public func weather30d(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherDailyResponse
  public func weather24h(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherHourlyResponse
  public func weather72h(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherHourlyResponse
  public func weather168h(_ parameter: QWeatherKit.WeatherParameter) async throws -> QWeatherKit.WeatherHourlyResponse
  public func minutely(_ parameter: QWeatherKit.MinutelyParameter) async throws -> QWeatherKit.MinutelyResponse
  public func gridNow(_ parameter: QWeatherKit.GridWeatherParameter) async throws -> QWeatherKit.GridNowResponse
  public func grid3d(_ parameter: QWeatherKit.GridWeatherParameter) async throws -> QWeatherKit.GridDailyResponse
  public func grid7d(_ parameter: QWeatherKit.GridWeatherParameter) async throws -> QWeatherKit.GridDailyResponse
  public func grid24h(_ parameter: QWeatherKit.GridWeatherParameter) async throws -> QWeatherKit.GridHourlyResponse
  public func grid72h(_ parameter: QWeatherKit.GridWeatherParameter) async throws -> QWeatherKit.GridHourlyResponse
  public func warningNow(_ parameter: QWeatherKit.WarningNowParameter) async throws -> QWeatherKit.WarningResponse
  public func warningList(_ parameter: QWeatherKit.WarningListParameter) async throws -> QWeatherKit.WarningListResponse
  public func indices1d(_ parameter: QWeatherKit.IndicesParameter) async throws -> QWeatherKit.IndicesDailyResponse
  public func indices3d(_ parameter: QWeatherKit.IndicesParameter) async throws -> QWeatherKit.IndicesDailyResponse
  public func airNow(_ parameter: QWeatherKit.AirParameter) async throws -> QWeatherKit.AirNowResponse
  public func air5d(_ parameter: QWeatherKit.AirParameter) async throws -> QWeatherKit.AirDailyResponse
  public func airCurrent(_ parameter: QWeatherKit.AirV1Parameter) async throws -> QWeatherKit.AirV1CurrentResponse
  public func airDaily(_ parameter: QWeatherKit.AirV1Parameter) async throws -> QWeatherKit.AirV1DailyResponse
  public func airHourly(_ parameter: QWeatherKit.AirV1Parameter) async throws -> QWeatherKit.AirV1HourlyResponse
  public func airStation(_ parameter: QWeatherKit.AirV1StationParameter) async throws -> QWeatherKit.AirV1StationResponse
  public func historicalWeather(_ parameter: QWeatherKit.HistoricalWeatherParameter) async throws -> QWeatherKit.HistoricalWeatherResponse
  public func historicalAir(_ parameter: QWeatherKit.HistoricalAirParameter) async throws -> QWeatherKit.HistoricalAirResponse
  public func tropicalStormList(_ parameter: QWeatherKit.StormListParameter) async throws -> QWeatherKit.StormListResponse
  public func tropicalStormForecast(_ parameter: QWeatherKit.StormParameter) async throws -> QWeatherKit.StormForecastResponse
  public func tropicalStormTrack(_ parameter: QWeatherKit.StormParameter) async throws -> QWeatherKit.StormTrackResponse
  public func oceanTide(_ parameter: QWeatherKit.OceanParameter) async throws -> QWeatherKit.OceanTideResponse
  public func oceanCurrents(_ parameter: QWeatherKit.OceanParameter) async throws -> QWeatherKit.OceanCurrentsResponse
  public func astronomySun(_ parameter: QWeatherKit.AstronomySunParameter) async throws -> QWeatherKit.AstronomySunResponse
  public func astronomyMoon(_ parameter: QWeatherKit.AstronomyMoonParameter) async throws -> QWeatherKit.AstronomyMoonResponse
  public func astronomySolarElevationAngle(_ parameter: QWeatherKit.SolarElevationAngleParameter) async throws -> QWeatherKit.AstronomySolarElevationAngleResponse
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class QWeatherObjc : ObjectiveC.NSObject {
  @objc public static func initConfig(host: Swift.String)
  @objc public static func setupHost(_ host: Swift.String)
  @objc public static func setupToken(_ token: Swift.String)
  @objc public static func setupLogEnable(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor public static func geoCityLookup(_ parameter: QWeatherKit.GeoCityLookupParameter, completionHandler: @escaping (QWeatherKit.GeoCityLookupResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func geoCityTop(_ parameter: QWeatherKit.GeoCityTopParameter, completionHandler: @escaping (QWeatherKit.GeoCityTopResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func geoPoiLookup(_ parameter: QWeatherKit.GeoPoiLookupParameter, completionHandler: @escaping (QWeatherKit.GeoPoiResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func geoPoiRange(_ parameter: QWeatherKit.GeoPoiRangeParameter, completionHandler: @escaping (QWeatherKit.GeoPoiResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weatherNow(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherNowResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather3d(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather7d(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather10d(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather15d(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather30d(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather24h(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherHourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather72h(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherHourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func weather168h(_ parameter: QWeatherKit.WeatherParameter, completionHandler: @escaping (QWeatherKit.WeatherHourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func minutely(_ parameter: QWeatherKit.MinutelyParameter, completionHandler: @escaping (QWeatherKit.MinutelyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func gridNow(_ parameter: QWeatherKit.GridWeatherParameter, completionHandler: @escaping (QWeatherKit.GridNowResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func grid3d(_ parameter: QWeatherKit.GridWeatherParameter, completionHandler: @escaping (QWeatherKit.GridDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func grid7d(_ parameter: QWeatherKit.GridWeatherParameter, completionHandler: @escaping (QWeatherKit.GridDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func grid24h(_ parameter: QWeatherKit.GridWeatherParameter, completionHandler: @escaping (QWeatherKit.GridHourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func grid72h(_ parameter: QWeatherKit.GridWeatherParameter, completionHandler: @escaping (QWeatherKit.GridHourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func warningNow(_ parameter: QWeatherKit.WarningNowParameter, completionHandler: @escaping (QWeatherKit.WarningResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func warningList(_ parameter: QWeatherKit.WarningListParameter, completionHandler: @escaping (QWeatherKit.WarningListResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func indices1d(_ parameter: QWeatherKit.IndicesParameter, completionHandler: @escaping (QWeatherKit.IndicesDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func indices3d(_ parameter: QWeatherKit.IndicesParameter, completionHandler: @escaping (QWeatherKit.IndicesDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func airNow(_ parameter: QWeatherKit.AirParameter, completionHandler: @escaping (QWeatherKit.AirNowResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func air5d(_ parameter: QWeatherKit.AirParameter, completionHandler: @escaping (QWeatherKit.AirDailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func airCurrent(_ parameter: QWeatherKit.AirV1Parameter, completionHandler: @escaping (QWeatherKit.AirV1CurrentResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func airDaily(_ parameter: QWeatherKit.AirV1Parameter, completionHandler: @escaping (QWeatherKit.AirV1DailyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func airHourly(_ parameter: QWeatherKit.AirV1Parameter, completionHandler: @escaping (QWeatherKit.AirV1HourlyResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func airStation(_ parameter: QWeatherKit.AirV1StationParameter, completionHandler: @escaping (QWeatherKit.AirV1StationResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func historicalWeather(_ parameter: QWeatherKit.HistoricalWeatherParameter, completionHandler: @escaping (QWeatherKit.HistoricalWeatherResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func historicalAir(_ parameter: QWeatherKit.HistoricalAirParameter, completionHandler: @escaping (QWeatherKit.HistoricalAirResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func tropicalStormList(_ parameter: QWeatherKit.StormListParameter, completionHandler: @escaping (QWeatherKit.StormListResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func tropicalStormForecast(_ parameter: QWeatherKit.StormParameter, completionHandler: @escaping (QWeatherKit.StormForecastResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func tropicalStormTrack(_ parameter: QWeatherKit.StormParameter, completionHandler: @escaping (QWeatherKit.StormTrackResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func oceanTide(_ parameter: QWeatherKit.OceanParameter, completionHandler: @escaping (QWeatherKit.OceanTideResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func oceanCurrents(_ parameter: QWeatherKit.OceanParameter, completionHandler: @escaping (QWeatherKit.OceanCurrentsResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func astronomySun(_ parameter: QWeatherKit.AstronomySunParameter, completionHandler: @escaping (QWeatherKit.AstronomySunResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func astronomyMoon(_ parameter: QWeatherKit.AstronomyMoonParameter, completionHandler: @escaping (QWeatherKit.AstronomyMoonResponse?, Foundation.NSError?) -> Swift.Void)
  @objc @_Concurrency.MainActor public static func astronomySolarElevationAngle(_ parameter: QWeatherKit.SolarElevationAngleParameter, completionHandler: @escaping (QWeatherKit.AstronomySolarElevationAngleResponse?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
extension QWeatherKit.Basin : Swift.Equatable {}
extension QWeatherKit.Basin : Swift.Hashable {}
extension QWeatherKit.Basin : Swift.RawRepresentable {}
extension QWeatherKit.Indices : Swift.Equatable {}
extension QWeatherKit.Indices : Swift.Hashable {}
extension QWeatherKit.Indices : Swift.RawRepresentable {}
extension QWeatherKit.Lang : Swift.Equatable {}
extension QWeatherKit.Lang : Swift.Hashable {}
extension QWeatherKit.Lang : Swift.RawRepresentable {}
extension QWeatherKit.Poi : Swift.Equatable {}
extension QWeatherKit.Poi : Swift.Hashable {}
extension QWeatherKit.Poi : Swift.RawRepresentable {}
extension QWeatherKit.Range : Swift.Equatable {}
extension QWeatherKit.Range : Swift.Hashable {}
extension QWeatherKit.Range : Swift.RawRepresentable {}
extension QWeatherKit.Unit : Swift.Equatable {}
extension QWeatherKit.Unit : Swift.Hashable {}
extension QWeatherKit.Unit : Swift.RawRepresentable {}
extension QWeatherKit.AirParameter : Swift.Sendable {}
extension QWeatherKit.AirV1Parameter : Swift.Sendable {}
extension QWeatherKit.AirV1StationParameter : Swift.Sendable {}
extension QWeatherKit.AstronomyMoonParameter : Swift.Sendable {}
extension QWeatherKit.AstronomySunParameter : Swift.Sendable {}
extension QWeatherKit.SolarElevationAngleParameter : Swift.Sendable {}
extension QWeatherKit.GeoCityLookupParameter : Swift.Sendable {}
extension QWeatherKit.GeoCityTopParameter : Swift.Sendable {}
extension QWeatherKit.GeoPoiLookupParameter : Swift.Sendable {}
extension QWeatherKit.GeoPoiRangeParameter : Swift.Sendable {}
extension QWeatherKit.GridWeatherParameter : Swift.Sendable {}
extension QWeatherKit.HistoricalAirParameter : Swift.Sendable {}
extension QWeatherKit.HistoricalWeatherParameter : Swift.Sendable {}
extension QWeatherKit.IndicesParameter : Swift.Sendable {}
extension QWeatherKit.MinutelyParameter : Swift.Sendable {}
extension QWeatherKit.OceanParameter : Swift.Sendable {}
extension QWeatherKit.StormListParameter : Swift.Sendable {}
extension QWeatherKit.StormParameter : Swift.Sendable {}
extension QWeatherKit.WarningListParameter : Swift.Sendable {}
extension QWeatherKit.WarningNowParameter : Swift.Sendable {}
extension QWeatherKit.WeatherParameter : Swift.Sendable {}
extension QWeatherKit.QWeatherErrorStatus : Swift.Equatable {}
extension QWeatherKit.QWeatherErrorStatus : Swift.Hashable {}
extension QWeatherKit.QWeatherErrorStatus : Swift.RawRepresentable {}
